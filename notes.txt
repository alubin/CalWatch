/*
 * CalWatch
 * Copyright (C) 2014 by Dan Wallach
 * Home page: http://www.cs.rice.edu/~dwallach/calwatch/
 * Licensing: http://www.cs.rice.edu/~dwallach/calwatch/licensing.html
 */

If you look at the full Git history of this file, you'll see it grew quite large at some points and
shrank down at others. Mostly it's served as the ongoing to-do list as well as notes for features in
progress.

==================================================================================================

Port to Android Wear
-- How to set up the emulator: http://www.tech-recipes.com/rx/49586/how-do-i-connect-an-android-wear-emulator-to-a-real-phone/
   adb -d forward tcp:5601 tcp:5601

-- How to connect to Bluetooth debugging for Moto 360: http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers/
    adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444

-- How to get a dump from the watch into a file and see it while it's going
    adb -s localhost:4444 logcat -v time | & tee logdumps/whatever.txt


TODO sort out how to compile protobufs automatically via Gradle
-- At least the Square protobuf runtime is automatically fetched and compiled
-- probably not worth the bother: long term plan is to kill protobufs, once we have reliable calendar on the wear side

Verify all the weird connect/disconnect corner cases
    TODO fresh boot of phone, make sure service is up no matter what
    TODO disconnect / reconnect of phone from watch
    TODO fresh boot of watch / reconnect to old phone app
    TODO nothing running on phone / fresh watch wants data
    TODO are we recovering properly if the phone kills the service after a long hiatus?

Daydream?
    http://www.hascode.com/2013/01/using-the-android-daydream-api/
    http://developer.android.com/reference/android/service/dreams/DreamService.html
    -- looks almost exactly the same as implementing an activity, or the watchface API

Refactoring / reengineering
    TODO alarm code is repeated on phone and wear side: do it in /shared
    (this is waiting until we have a final idea of how we're supposed to implement a wear app)

    TODO fix Gradle, presently requiring me to have the git version code in three places to work right
    (I tried putting it just in settings.gradle or the top-level build.gradle and this didn't work)

Right-to-left support
    TODO detect when we're in RTL mode
    TODO swap day/date block from 9 o'clock to 3 o'clock or leave alone?

Add internationalization strings
    Currently have localized strings for Spanish, Dutch, Turkish, German; need more

Deal with multiday events that aren't "all day" events
    TODO idea: resurrect all-day events by rendering them (and long events) as thin rings, perhaps separate from the main time wedges

FINAL ANDROID WATCHFACE API !!!
    DONE! task 0: prior work
        DONE! boot Wear 5 emulator, paired with tablet
        DONE! Does the existing release1c APK break on Wear 5? IT WORKS!
        TODO ambient mode seems broken (based on hitting "F7"), probably not worth fixing
    TODO task 1: graphics
        DONE! Identify best starting place (*not* CalendarWatchFaceService)
        TODO 1Hz refresh (no calendar at all)
        TODO 40Hz refresh main (built into SweepWatchFace ?!!)
        TODO drawing calendar (with old-school data forwarding)
        TODO redo ambient mode
            TODO hollow out the hands
            TODO hollow out the time wedges
            TODO disable anti-aliasing
            TODO don't render the power-remaining dot at all
            TODO distinct behavior for "mute" mode?
        TODO specify where the battery-charging indicator goes
            - http://developer.android.com/training/wearables/watch-faces/issues.html
        TODO companion configuration activity
            TODO intents
            TODO XML manifest stuff
            - http://developer.android.com/training/wearables/watch-faces/configuration.html
            TODO can this eliminate the need for notifications?
            - probably not, since we want to be there at boot time; but worth investigating
            - we can definitely nuke notifications once we're done with task 2
        TODO >1 refresh/minute ambient
    TODO task 2: calendar
        TODO Move from calendar multithreading to ASyncTask (as in the provided example)
        - this is probably the place to start, as it's going to be more power efficient and
          yield cleaner code. Also a nice warm-up before diving into the next bits.
        TODO WearableCalendarContract vs. CalendarContract: what's exactly missing here?
        - notably, the "AgendaData" example is doing a bunch of phone-side work, just like CalWatch
        TODO Verify that enough of the calendar exists on watch side to avoid transmission from phone
        TODO Kill off serialization and transmission of calendar data (built into the watch now!)
        TODO Kill off notifications on watch side (since they'll get a perfectly useful default)
    Secondary porting issues
        TODO Kill off Protobufs? All we've got is a couple small integers and booleans left
        TODO extra screen squish when a peek card is visible?
        - perhaps generalize the existing Moto360 bottom hack?
        TODO update the slides
