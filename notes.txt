/*
 * CalWatch
 * Copyright (C) 2014 by Dan Wallach
 * Home page: http://www.cs.rice.edu/~dwallach/calwatch/
 * Licensing: http://www.cs.rice.edu/~dwallach/calwatch/licensing.html
 */

If you look at the full Git history of this file, you'll see it grew quite large at some points and
shrank down at others. Mostly it's served as the ongoing to-do list as well as notes for features in
progress. That functionality is still here, but we've now got a preamble to explain the directory
structure.

What's where:

/images -- screen dumps and assorted graphics
    (note: "resample.csh", at the top level, starts from a high-resolution screen dump and generates
     preview images at all the correct resolutions; these downstream dependencies are all checked
     in, so unless you're changing the the icon, you don't need to rerun this csh script.)

/logdumps -- logcat plus notes from the various times that CalWatch has blown up

/mobile -- code that runs only on the phone
    src/androidTest/java/ -- some unit tests for event layout
    src/main/java/ -- CalWatch Java files

/shared -- code that runs on both the phone and on the watch
    src/main/java/
        EDU.Washington.grad.gjb.cassowary -- the Cassowary linear constraint solver

        - The code here is essentially unchanged from the original
          (http://sourceforge.net/projects/cassowary/), but with tweaks to compile under newer
          Java versions

        org.dwallach.calwatch/ -- CalWatch Java files
            proto/ -- protocol buffer code for communications between devices
                calendar.proto contains instructions on how to regenerate the Java files here

/wear -- code that runs only on the watch

==================================================================================================

Port to Android Wear
-- How to set up the emulator: http://www.tech-recipes.com/rx/49586/how-do-i-connect-an-android-wear-emulator-to-a-real-phone/
   adb -d forward tcp:5601 tcp:5601

-- How to connect to Bluetooth debugging for Moto 360: http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers/
    adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444

TODO sort out how to compile protobufs automatically via Gradle
-- At least the Square protobuf runtime is automatically fetched and compiled

Verify all the weird connect/disconnect corner cases
    TODO fresh boot of phone, make sure service is up no matter what
    TODO disconnect / reconnect of phone from watch
    TODO fresh boot of watch / reconnect to old phone app
    TODO nothing running on phone / fresh watch wants data
    TODO are we recovering properly if the phone kills the service after a long hiatus?

Daydream?
    http://www.hascode.com/2013/01/using-the-android-daydream-api/
    http://developer.android.com/reference/android/service/dreams/DreamService.html
    -- looks almost exactly the same as implementing an activity, or the watchface API

Refactoring / reengineering
    TODO alarm code is repeated on phone and wear side: do it in /shared
    (this is waiting until we have a final idea of how we're supposed to implement a wear app)

    TODO refactor gradle libraries, put git version code in one place (settings.gradle?)
