Performance
   TODO do we have a performance problem? we're getting 30fps on LG watch, 55+ FPS on N5 with small face
   -- first crack showed we're spending most of our time in the native drawPath routine, so there
      isn't exactly a whole lot we can do. Fixed text outlines to only render once versus a 2D loop.

DONE?! deal with recurring events
-- RecurrenceProcessor.expand() seems to do exactly what I want. Hypothetically, this is going to
   be a quick hack, if it work.

   maybe I need a better RFC 2245 (iCal) parser? Google has one:
   https://code.google.com/p/google-rfc-2445/

   Curiously, it's blowing up on the E2E VIV office hours, which has an exDate field of this:
   America/Los_Angeles;20140815T100000,20140822T100000,20140829T100000)

   The claim is that there's a "missing LHS" in the timezone part. Hrmm.

Port to Android Wear
-- Useful article including sample code: http://toastdroid.com/2014/07/18/developing-watchfaces-for-android-wear/
-- How to set up the damn emulator: http://www.tech-recipes.com/rx/49586/how-do-i-connect-an-android-wear-emulator-to-a-real-phone/
   adb -d forward tcp:5601 tcp:5601

    TODO verify on round face
    Kludgy way to detect if we're on round vs. square:
        http://stackoverflow.com/questions/25821544/detect-moto-360-circlular-shape-and-onapplywindowinsetlistener-not-being-called
    See also:
        http://stackoverflow.com/questions/24907557/android-wear-type-detection-round-or-square
        http://stackoverflow.com/questions/22525582/is-there-any-way-to-detect-if-the-clock-is-round

    TODO detect Moto 360 and deal with cropping
    -- only way to detect seems to be using android.os.Build.MODEL, but I don't know the value until I've got a real Moto 360.
    -- cropping code is otherwise ready to go

    DONE!? support the "real" watchface API?
        http://www.binpress.com/tutorial/how-to-create-a-custom-android-wear-watch-face/120
        https://github.com/kentarosu/androidwear-myfirstwatchface

        DONE "sample" face for selector
        DONE deal with dimming (kill second hand? lower frame rate? all white?) "Ambient mode"
        -- seems to be working, although the clock is still running when it's obscured

    TODO better ambient mode detection? https://gist.github.com/PomepuyN/cdd821eca163a3279de2 (pasted at bottom)


TODO sort out how to compile protobufs automatically via Gradle (vs. known bugs lodged with Google)
-- At least the Square protobuf runtime is automatically fetched and compiled
-- Seems to be compiling correctly, might even work on the first try (ha!)

TODO fancier control panel: Material Layout cards

Verify all the weird connect/disconnect corner cases
    TODO fresh boot of phone, make sure service is up no matter what
    TODO disconnect / reconnect of phone from watch
    TODO fresh boot of watch / reconnect to old phone app
    TODO nothing running on phone / fresh watch wants data
    TODO are we recovering properly if the phone kills the service after a long hiatus?

TODO get a real app icon
DONE?! slower refresh rate when second hand not being displayed
TODO app signing
TODO smarter DrawArc

DONE! make battery gauge pretty
DONE?! if we're coming back from being asleep, make sure we invalidate the batteryPathCache

DONE! fix regression: we're not clipping the events to the visible 12 hour window
  Also, we now send 24 hours of events at once and do all the clipping in the watch, meaning
  that the watch will have something useful to show in the morning even if it's been disconnected
  from the phone all night (e.g., if charging in different parts of the house)


BUGS BUGs BUGZ!
  TODO when there are no events coming up, it looks like nothing ever gets sent to the watch
  TODO incorrect handling of watch lifecycle (shock, horror)
  -- ignoring changes in the Activity seems to be helping, a bit, but we're not learning
     anything, at all, when the user covers the screen with something else. Not good. Also,
     there's some ugliness when another email or event wants to draw on top.
  TODO after 12 hours overnight disconnected, we're still having radius > 1 and/or < 0 issues
  -- see images/bug-shot-2014-09-12-071550.png
  -- maybe fixed now that local vs. GMT is straightened out?

Notes on supporting a "real" watch face (via reading over:
https://github.com/twotoasters/watchface-template/tree/master/submodules

 Gears library:
    Activity.java: nothing interesting at all
    DeviceUtils.java: totally cheesy way of determining AMOLED: lookup
      table based on device type
    Watch.java:
      TODO- an intent called KEEP_WATCHFACE_AWAKE
      - logic to deal with changing timezones
      - onTimeChanged() via alarm manager when seconds are turned off (do we care?)
      - unclear if any of this is necessary

  mobile/src/main/AndroidMainfest.xml:
    uses-permission for background
    preview.png

    (BOTH DONE! -- but need to redo the preview image once the face graphics settles down)

  wear/src/main/AndroidManifest.xml:
    more permission usage
    some funkiness about how the activity is set up (providing background, etc.)

    (BOTH DONE!)

  Meanwhile, there's all this business about Square's various testing
  and code injection libraries. Probably not worth bothering
  now. Maybe later.


Lifecycle madness:

Here's what happens when I hit the home button on the phone:

09-09 16:36:18.176  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Pause!
09-09 16:36:18.176  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ pausing animation
09-09 16:36:18.576  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ Drawing surface destroyed!
09-09 16:36:18.576  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ stopping animation!
09-09 16:36:18.576  25448-10110/org.dwallach.calwatch V/MyViewAnim﹕ looper finished!
09-09 16:36:18.976  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Stop!
09-09 16:36:18.976  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ stopping animation!

Versus, here's what happens, *sometimes* when the screen goes off by itself:

09-09 16:27:00.676  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Pause!
09-09 16:27:00.676  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ pausing animation
09-09 16:27:00.686  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Stop!
09-09 16:27:00.686  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ stopping animation!
09-09 16:27:00.686   25448-9866/org.dwallach.calwatch V/MyViewAnim﹕ looper finished!
09-09 16:27:06.106  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ Drawing surface destroyed!
09-09 16:27:06.106  25448-25448/org.dwallach.calwatch V/MyViewAnim﹕ stopping animation!
TODO: where the hell did this come from and why is the phone activity restarting itself?
09-09 16:27:06.126  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Create!
09-09 16:27:06.126  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ Start!
09-09 16:27:06.126  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ And in the beginning ...
09-09 16:27:06.126  25448-25448/org.dwallach.calwatch V/PhoneActivity﹕ reconnecting clock state



Further improvements:
  Calendar rendering:
    TODO if we've got a busy calendar on one side of the watch and a simpler one on the other side, we can have unbalanced wedges (one could be 0-5 and the other is 6-6)

    Possible solution: rather than having the current scheme where we add levels every time, we could instead start with 0 - MAXINT
    Every wedge starts out from 0 - MAXINT. When there's overlap, we add a constraint that the two not overlap. That has us
    setting up a series of constraints that a solver could go after. This.max is less than that.min. That.min is greater than this.max, but
    we want to maximize the size of each wedge *and* we want to minimize another function that measures stddev over wedge thickness when
    wedges overlap.

    A constraint solver can probably do this without breaking a sweat. Seems like overkill, but might work.

    http://jacopguide.osolpro.com/guideJaCoP.html
    http://www.constraintsolving.com/solvers/java-based-solvers

  Moto 360:
    DONE!! pull back the radius along the bottom to fit the cropped ~30 pixels -- maybe an extension to drawRadialLine that knows about the bounding box and projects the line backward
